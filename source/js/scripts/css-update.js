#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');

// Default path to the global.css relative to project root (this file's known location)
const defaultGlobalPath = path.resolve(__dirname, '..', '..', 'styles', 'global.css');

// Allow passing a custom path to global.css as first CLI argument
const globalCssPath = process.argv[2] ? path.resolve(process.argv[2]) : defaultGlobalPath;

function isCssFile(file) {
	return path.extname(file).toLowerCase() === '.css';
}

function findCssFiles(dir, results = []) {
	const entries = fs.readdirSync(dir, { withFileTypes: true });
	for (const entry of entries) {
		const resPath = path.join(dir, entry.name);
		if (entry.isDirectory()) {
			findCssFiles(resPath, results);
		} else if (entry.isFile() && isCssFile(entry.name)) {
			results.push(resPath);
		}
	}
	return results;
}

function buildImportLines(globalCssAbsolutePath, cssFiles) {
	const globalDir = path.dirname(globalCssAbsolutePath);
	// Filter out the global file itself
	const filtered = cssFiles.filter(p => path.resolve(p) !== path.resolve(globalCssAbsolutePath));
	// Sort for deterministic output: directories first, then filename
	filtered.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));

	const imports = filtered.map(p => {
		const rel = path.relative(globalDir, p).split(path.sep).join('/'); // use forward slashes
		return `@import "./${rel}";`;
	});

	return imports;
}

function writeGlobal(globalCssAbsolutePath, importLines) {
	const header = `/* THIS FILE IS AUTO-GENERATED BY css-update.js */\n/* Do not edit directly. */\n\n`;
	const content = header + importLines.join('\n') + '\n';
	fs.writeFileSync(globalCssAbsolutePath, content, 'utf8');
	console.log(`Wrote ${importLines.length} @import lines to ${globalCssAbsolutePath}`);
}

function main() {
	try {
		if (!fs.existsSync(globalCssPath)) {
			console.error(`global.css not found at ${globalCssPath}`);
			process.exit(2);
		}

		const baseDir = path.dirname(globalCssPath);
		const cssFiles = findCssFiles(baseDir);

		const importLines = buildImportLines(globalCssPath, cssFiles);

		writeGlobal(globalCssPath, importLines);
	} catch (err) {
		console.error('Error while updating global.css:', err);
		process.exit(1);
	}
}

if (require.main === module) main();
